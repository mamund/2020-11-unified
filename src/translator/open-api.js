// ***************************************************
// to OpenAPI document
// passes https://apitools.dev/swagger-parser/online/
// ***************************************************

const { groups, safe, unsafe, update, remove } = require('../util/alps-predicates')
const { rString, rxHash, rxQ } = require('../util/print-utils')

module.exports = (doc, options) => {
  console.log(doc);
  var rtn = "";

  // preamble
  rtn += "openapi: 3.0.1\n";
  rtn += "\n";
  
  // signature
  rtn += '?? *******************************************************************\n';
  rtn += `?? generated by "unified" from ${options.file}\n`;
  rtn += `?? date: ${new Date()}`;
  rtn += '\n';
  rtn += '?? http://github.com/mamund/2020-11-unified\n';
  rtn += '?? *******************************************************************\n';
  rtn += '\n';
  
    
  // info section
  rtn += "info:\n";
  rtn += `  title: ${doc.alps.ext && doc.alps.ext.filter(metadata_title)[0].value||"ALPS API"}\n`;
  rtn += `  description: ${doc.alps.doc.value||`Generated from ALPS file ${options.file}`}\n`;
  rtn += "  version: 1.0.0\n";
  rtn += "\n";
  
  if(doc.alps.ext && doc.alps.ext.filter(metadata_root)) {
    rtn += "servers:\n"
    rtn += `- url: '${doc.alps.ext.filter(metadata_root)[0].value}'\n`;
    rtn += "\n";
  }
  
  // paths
  rtn += "paths:\n";
  
  // gets
  coll = doc.alps.descriptor.filter(safe);
  coll.forEach(function(item) {
    rtn += `  /${item.id}:\n`;
    rtn += "    get:\n";
    rtn += `      summary: '${item.text||item.id}'\n`;
    rtn += `      operationId: ${item.id}\n`;
    rtn += "      responses:\n";
    rtn += "        200:\n";
    rtn += `          description: ${item.id}\n`;
    rtn += "          content:\n";
    rtn += "            application/json:\n";
    rtn += "              schema:\n";
    rtn += "                type: array\n";
    rtn += "                items:\n";
    rtn += `                  $ref: '??/components/schemas/${item.rt||item.returns}'\n`;
  });
  
  // posts
  coll = doc.alps.descriptor.filter(unsafe);
  coll.forEach(function(item) {
    rtn += `  /${item.id}:\n`;
    rtn += "    post:\n";
    rtn += `      summary: '${item.text||item.id}'\n`;
    rtn += `      operationId: ${item.id}\n`;
    rtn += "      requestBody:\n";
    rtn += "        content:\n";
    rtn += "          application/json:\n";
    rtn += "            schema:\n";
    rtn += `              $ref: '??/components/schemas/${item.rt||item.returns}'\n`;
    rtn += "      responses:\n";
    rtn += "        200:\n";
    rtn += `          description: add ${item.id}\n`;
    rtn += "          content:\n";
    rtn += "            application/json:\n";
    rtn += "              schema:\n";
    rtn += "                type: array\n";
    rtn += "                items:\n";
    rtn += `                  $ref: '??/components/schemas/${item.rt||item.returns}'\n`;
  });

  // put
  coll = doc.alps.descriptor.filter(update);
  coll.forEach(function(item) {
    rtn += `  /${item.id}:\n`;
    rtn += "    put:\n";
    rtn += `      summary: '${item.text||item.id}'\n`;
    rtn += `      operationId: ${item.id}\n`;
    rtn += "      requestBody:\n";
    rtn += "        content:\n";
    rtn += "          application/json:\n";
    rtn += "            schema:\n";
    rtn += `              $ref: '??/components/schemas/${item.rt||item.returns}'\n`;
    rtn += "      responses:\n";
    rtn += "        200:\n";
    rtn += `          description: add ${item.id}\n`;
    rtn += "          content:\n";
    rtn += "            application/json:\n";
    rtn += "              schema:\n";
    rtn += "                type: array\n";
    rtn += "                items:\n";
    rtn += `                  $ref: '??/components/schemas/${item.rt||item.returns}'\n`;
  });

  // deletes
  coll = doc.alps.descriptor.filter(remove);
  coll.forEach(function(item) {
    rtn += `  /${item.id}/{id}:\n`;
    rtn += "    delete:\n";
    rtn += `      summary: '${item.text||item.id}'\n`;
    rtn += `      operationId: ${item.id}\n`;
    rtn += "      parameters:\n";
    item.descriptor.forEach(function(prop) {
      rtn += `        - name: ${prop.href}\n`;
      rtn += "          in: path\n";
      rtn += `          description: ${prop.href} of ${item.id}\n`;
      rtn += "          required: true\n";
      rtn += "          schema:\n";
      rtn += "            type: string\n";      
    });
    rtn += "      responses:\n";
    rtn += "        204:\n";
    rtn += `          description: delete ${item.id}\n`;
  });
  rtn += "\n";
    
  // components
  rtn += "components:\n";  
  rtn += "  schemas:\n";
  coll = doc.alps.descriptor.filter(groups);
  coll.forEach(function(item) {
    rtn += `    ${item.id}:\n`;
    if(item.text) {
      rtn += `      description: ${item.text}\n`;
    }
    rtn += "      type: object\n";
    rtn += "      properties:\n";
    item.descriptor.forEach(function(prop) {
      rtn += `          ${prop.href}:\n`;
      rtn += "            type: string\n";
      rtn += `            example: ${rString(prop.href)}\n`; 
    });      
  });
  
  // clean up doc
  rtn = rtn.replace(rxHash,"");
  rtn = rtn.replace(rxQ,"#");
  
  return rtn;
}