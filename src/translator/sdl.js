
// *******************************************
// to graphql sdl
// passes https://app.graphqleditor.com/
// *******************************************

const { groups, safe, unsafe, idempotent } = require('../util/alps-predicates')
const { rxHash, rxQ } = require('../util/print-utils')

module.exports = (doc, options) => {
  var rtn = "";
  var coll;

  // signature
  rtn += '?? *******************************************************************\n';
  rtn += `?? generated by "unified" from ${options.file}\n`;
  rtn += `?? date: ${new Date()}`;
  rtn += '\n';
  rtn += '?? http://github.com/mamund/2020-11-unified\n';
  rtn += '?? *******************************************************************\n';
  rtn += '\n';

  // types
  coll = doc.alps.descriptor.filter(groups);
  coll.forEach(function(item) {
    rtn += `type ${item.id} {\n`;
    item.descriptor.forEach(function(prop) {
      rtn += `  ${prop.href}: String!\n`;    
    });
    rtn += '}\n';
  }); 
  rtn += '\n';
  
  // query
  coll = doc.alps.descriptor.filter(safe);
  coll.forEach(function(item) {
    rtn += 'type Query {\n';
    rtn += `  ${item.id}: [${item.rt}]\n`;
    rtn += '}\n';
  });
  rtn += '\n';

  // mutations
  rtn += 'type Mutation {\n';
  coll = doc.alps.descriptor.filter(unsafe);
  coll.forEach(function(item) {
    rtn += `  ${item.id}(`;
    if(item.descriptor) {
      rtn += `${item.descriptor[0].href}: String!`;
    }  
    rtn += `): ${item.rt}\n`;
  });                       
  coll = doc.alps.descriptor.filter(idempotent);
  coll.forEach(function(item) {
    rtn += `  ${item.id}(`;
    if(item.descriptor) {
      rtn += `${item.descriptor[0].href}: String!`;
    }  
    rtn += `): ${item.rt}\n`;  
  });                       
  rtn += '}\n';

  // final schema declaration
  rtn += '\n';
  rtn += 'schema {\n';
  rtn += '  query: Query,\n';
  rtn += '  mutation: Mutation\n';
  rtn += '}\n';
  
  rtn = rtn.replace(rxHash,"");
  rtn = rtn.replace(rxQ,"#");
  
  return rtn;
}